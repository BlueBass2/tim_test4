# .github/workflows/ai-code-review.yml (v4 - Fix script injection issue)

name: AI Code Review with Gemini

on:
  pull_request:
    # 監聽 PR 的開啟、更新狀態
    types: [opened, synchronize]

permissions:
  contents: read
  pull-requests: write

jobs:
  code-review:
    #指定這個工作將在 GitHub 提供的最新版 Ubuntu Linux 虛擬環境(runner)上執行
    runs-on: ubuntu-latest

    steps:
      # Step 1: 安裝 jq 工具(jq 是一個命令列的 JSON 處理器)
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      # Step 2: 將儲存庫的程式碼下載到 runner 環境中
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Step 3: 比較 Pull Request 中的程式碼差異，並設定一個 flag 來判斷是否有差異
      - name: Get PR Diff
        id: get_diff
        run: |
          git diff --no-color "${{ github.event.pull_request.base.sha }}" "${{ github.event.pull_request.head.sha }}" > diff.txt
          
          if [ ! -s diff.txt ]; then
            echo "No code changes detected. Skipping AI review."
            echo "continue=false" >> $GITHUB_OUTPUT
          else
            echo "Code changes detected. Proceeding with AI review."
            echo "continue=true" >> $GITHUB_OUTPUT
          fi

      # Step 4: 呼叫 Gemini API 來做 Code Review
      - name: Call Gemini API for Code Review
        id: call_gemini
        if: steps.get_diff.outputs.continue == 'true'
        run: |
          CODE_DIFF=$(cat diff.txt)
          JSON_PAYLOAD=$(jq -n --arg diff "$CODE_DIFF" '{
            "contents": [{
              "parts": [{
                "text": "你是一位資深程式碼審查員，專長在於找出技術債、重構建議與 clean code 和 SOLID 原則。\n\n以下是 pull request 的程式碼差異，請指出是否有技術債、壞味道、維護風險、安全性問題，並給出重構建議。\n\n 請在項目符號清單中提供具體、可操作的重構建議。\n\n語言請以繁體中文撰寫。\n\n---START CODE DIFF---\n\n\($diff)\n\n---END CODE DIFF---"
              }]
            }],
            "generationConfig": { "temperature": 0.4, "topK": 32, "topP": 1, "maxOutputTokens": 4096, "stopSequences": [] },
            "safetySettings": [
              { "category": "HARM_CATEGORY_HARASSMENT", "threshold": "BLOCK_MEDIUM_AND_ABOVE" }, { "category": "HARM_CATEGORY_HATE_SPEECH", "threshold": "BLOCK_MEDIUM_AND_ABOVE" },
              { "category": "HARM_CATEGORY_SEXUALLY_EXPLICIT", "threshold": "BLOCK_MEDIUM_AND_ABOVE" }, { "category": "HARM_CATEGORY_DANGEROUS_CONTENT", "threshold": "BLOCK_MEDIUM_AND_ABOVE" }
            ]
          }')
          API_KEY="${{ secrets.GEMINI_API_KEY }}"
          RESPONSE=$(curl -s -X POST "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-001:generateContent?key=${API_KEY}" -H "Content-Type: application/json" -d "${JSON_PAYLOAD}")
          if echo "${RESPONSE}" | jq -e '.error' > /dev/null; then echo "::error::Gemini API returned an error:" && echo "${RESPONSE}" && exit 1; fi
          if ! echo "${RESPONSE}" | jq -e '.candidates' > /dev/null; then echo "::error::Gemini API response is not in the expected format. 'candidates' field is missing." && echo "Full response: ${RESPONSE}" && exit 1; fi
          REVIEW_COMMENT=$(echo "${RESPONSE}" | jq -r '.candidates[0].content.parts[0].text')
          echo "review_comment<<EOF" >> $GITHUB_OUTPUT
          echo "${REVIEW_COMMENT}" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # Step 5: 將 AI 評論發佈到 Pull 請求
      - name: Post Review Comment to PR
        if: steps.get_diff.outputs.continue == 'true'
        uses: actions/github-script@v7
        env:
          REVIEW_COMMENT: ${{ steps.call_gemini.outputs.review_comment }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const rawComment = process.env.REVIEW_COMMENT;
            // 在插入到樣板字面值之前，對所有反引號進行跳脫
            const escapedComment = rawComment.replace(/`/g, '\\`');
            
            const issue_number = context.issue.number;
  
            const finalBody = `
            ### 🤖 Gemini AI Code Review
  
            您好！我已經審核了此PR請求中的變更。以下是我的發現:
  
            ---
  
            ${escapedComment}
  
            ---
  
            *Note: This is an automated review by Gemini. Please use it as a guide and apply human oversight.*
            `;
  
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue_number,
              body: finalBody
            });
